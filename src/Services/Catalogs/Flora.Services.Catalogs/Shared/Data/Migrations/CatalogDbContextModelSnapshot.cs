// <auto-generated />
using System;
using Flora.Services.Catalogs.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Flora.Services.Catalogs.Shared.Data.Migrations
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Flora.Services.Catalogs.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_categories_id");

                    b.ToTable("categories", "catalog");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Characteristics.Models.Characteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.HasKey("Id")
                        .HasName("pk_characteristics");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_characteristics_category_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristics_id");

                    b.ToTable("characteristics", "catalog");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Characteristics.Models.CharacteristicValue", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CharacteristicId")
                        .HasColumnType("uuid")
                        .HasColumnName("characteristic_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_characteristic_values");

                    b.HasIndex("CharacteristicId")
                        .HasDatabaseName("ix_characteristic_values_characteristic_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_characteristic_values_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_characteristic_values_product_id");

                    b.ToTable("characteristic_values", "catalog");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Products.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long>("OriginalVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("bigint")
                        .HasColumnName("original_version");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ProductStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasDefaultValue("Available")
                        .HasColumnName("product_status");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_products_id");

                    b.ToTable("products", "catalog");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Categories.Category", b =>
                {
                    b.OwnsOne("Flora.Services.Catalogs.Products.Models.Image", "Image", b1 =>
                        {
                            b1.Property<Guid>("CategoryId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("image_url");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("boolean")
                                .HasColumnName("is_main");

                            b1.HasKey("CategoryId");

                            b1.ToTable("categories", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId")
                                .HasConstraintName("fk_categories_categories_id");
                        });

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Characteristics.Models.Characteristic", b =>
                {
                    b.HasOne("Flora.Services.Catalogs.Categories.Category", "Category")
                        .WithMany("Characteristics")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_characteristics_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Characteristics.Models.CharacteristicValue", b =>
                {
                    b.HasOne("Flora.Services.Catalogs.Characteristics.Models.Characteristic", "Characteristic")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characteristic_values_characteristics_characteristic_id");

                    b.HasOne("Flora.Services.Catalogs.Products.Models.Product", "Product")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_characteristic_values_products_product_id");

                    b.Navigation("Characteristic");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Products.Models.Product", b =>
                {
                    b.HasOne("Flora.Services.Catalogs.Categories.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_categories_category_id");

                    b.OwnsOne("Flora.Services.Catalogs.Products.ValueObjects.Stock", "Stock", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<int>("Available")
                                .HasColumnType("integer")
                                .HasColumnName("stock_available");

                            b1.Property<int>("MaxStockThreshold")
                                .HasColumnType("integer")
                                .HasColumnName("stock_max_stock_threshold");

                            b1.Property<int>("RestockThreshold")
                                .HasColumnType("integer")
                                .HasColumnName("stock_restock_threshold");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsMany("Flora.Services.Catalogs.Products.Models.Image", "Images", b1 =>
                        {
                            b1.Property<Guid>("id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("ImageUrl")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("image_url");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("boolean")
                                .HasColumnName("is_main");

                            b1.Property<Guid>("owner_id")
                                .HasColumnType("uuid")
                                .HasColumnName("owner_id");

                            b1.HasKey("id")
                                .HasName("pk_products_images");

                            b1.HasIndex("id")
                                .HasDatabaseName("ix_products_images_id");

                            b1.HasIndex("owner_id")
                                .HasDatabaseName("ix_products_images_owner_id");

                            b1.ToTable("products_images", "catalog");

                            b1.WithOwner()
                                .HasForeignKey("owner_id")
                                .HasConstraintName("fk_products_images_products_product_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Images");

                    b.Navigation("Stock")
                        .IsRequired();
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Categories.Category", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Characteristics.Models.Characteristic", b =>
                {
                    b.Navigation("CharacteristicValues");
                });

            modelBuilder.Entity("Flora.Services.Catalogs.Products.Models.Product", b =>
                {
                    b.Navigation("CharacteristicValues");
                });
#pragma warning restore 612, 618
        }
    }
}
